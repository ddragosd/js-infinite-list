{"name":"Js-infinite-list","body":"# InfiniteList\r\n\r\nNOTE: Work in progress. Not ready for any use at the moment. Please check back later.\r\n\r\n## Motivation\r\nAt the time I'm writing this small library I've been looking a lot on the internet, to see how other people solved this problem.\r\n\r\nThis [link](http://designbeep.com/2011/08/12/12-jquery-infinite-scrollingscroll-read-plugins-for-content-navigation/) for instance, is showing a few jQuery plugins handling infinite scrolling.\r\n\r\nThe thing that is difficult to accommodate in these plugins is the fact that each case is different. Some plugins may expect JSON content, others may expect HTML. Some plugins depend on browser URL, others let you specify a URL. Why can't we control these aspects with a single lib and worry about finding a new lib when requirements change ?\r\n\r\n## Infinite List concepts\r\n\r\nIn this library I'm trying to clearly isolate the 2 aspects of an Infinite List:\r\n\r\n* View: how the list elements look\r\n * Are they generated from a template ?\r\n * Do they come pre-rendered as HTML ?\r\n* Domain: Control how data is loaded\r\n * What is the URL ?\r\n * When to load it ?\r\n\r\nThis library allows you to customize each of these aspects.\r\n\r\nMore on these a bit later. For now let's see a quick example.\r\n\r\n## Example\r\n\r\nStart by defining the HTML container for the list:\r\n\r\n    <div class=\"myListContainer\">\r\n        <img id=\"listLoader\" src=\"images/loader.gif\"/>\r\n    </div>\r\n\r\nThen define the domain of the list.\r\n\r\n    dataProvider = new iList.LazyDataProvider({\r\n    \r\n            loadPolicy:  new iList.loadPolicy.ManualLoadPolicy( \"#listLoader\" ), \r\n                         // new iList.loadPolicy.iScroll(), \r\n                         // new iList.loadPolicy.WindowScroll()\r\n                         \r\n            loader:    new iList.loader.AjaxDataLoader({\r\n                                url:    \"mysite.com?q='searchString'\",\r\n                                offset: 0,         // how may rown to skip\r\n                                rows:   3,         // how many rows to get each time\r\n                                })\r\n                        })\r\n\r\nThen create the list, and you're done.\r\n```javascript\r\n    list = new iList.InfiniteList( {\r\n            # VIEW configuration\r\n            container:              $(\"#myListContainer\"),  // an HTML element\r\n            itemRendererTemplate:   \"<div>{{title}}</div>\", // template for each new item to add\r\n            templateFunction:       Mustache.to_html,       // templating function.\r\n\r\n            loaderSelector:         $(\"#listLoader\"),       // an HTML element indicating loading\r\n\r\n            # DOMAIN configuration\r\n            dataProvider:           dataProvider  } )       // source of data for the list\r\n```\r\n\r\n## View: how list elements look\r\n\r\nTBD\r\n\r\n## Domain: Control how data is loaded\r\n\r\nTBD\r\n\r\n## Building Infinite List\r\n\r\nThe build depends on [Apache Maven](http://maven.apache.org/guides/getting-started/index.html).\r\nFor those familiar with `maven` it's pretty straight forward:\r\n\r\n    mvn clean install\r\n\r\nBuild also integrates unit tests; in case the build fails b/c it cannot open a browser add `browserPath` parameter:\r\n\r\n    mvn clean install -DbrowserPath=/path/to/my/browser\r\n\r\nIf you want to skip the tests, you can execute:\r\n\r\n    mvn clean install -Dmaven.test.skip=true\r\n\r\n## Links and resources\r\n\r\n* [Maven Getting Started Guide](http://maven.apache.org/guides/getting-started/index.html)\r\n","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}